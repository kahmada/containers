#include <iostream>
#include <memory>
struct CustomDeleter{
    void operator()(int *ptr){
        std::cout << "supression de l'entier " << *ptr << std::endl;
        delete ptr;
    }
};

int main()
{
    std::unique_ptr<int, CustomDeleter> ptr(new int(99), CustomDeleter());
}

/*
Oui, std::unique_ptr<int, CustomDeleter> ressemble aux containers, car : 
âœ… Il utilise une syntaxe basÃ©e sur les templates.
âœ… Il gÃ¨re la mÃ©moire automatiquement, comme std::vector.
âœ… Il peut accepter un paramÃ¨tre supplÃ©mentaire (CustomDeleter), comme certains containers utilisent des allocateurs.

ğŸ’¡ Mais la diffÃ©rence principale est que std::unique_ptr ne gÃ¨re qu'un seul Ã©lÃ©ment Ã  la fois (contrairement Ã  std::vector, qui stocke plusieurs Ã©lÃ©ments).
*/


//struct : AccÃ¨s par dÃ©faut : public  Utilisation typique : donnÃ©es uniquement (pas de mÃ©thodes) . heritage par dÃ©faut : public

//class : AccÃ¨s par dÃ©faut : private  Utilisation typique: Programmation orientÃ©e objet (OOP)  DonnÃ©es et mÃ©thodes . Encapsulation  heritage par dÃ©faut : private
// en C++:
//Utiliser struct si câ€™est juste un conteneur de donnÃ©es. -Utiliser class pour tout le reste.


/*
Les containers gÃ¨rent la mÃ©moire automatiquement.
std::unique_ptr fait exactement la mÃªme chose mais pour un seul objet.
*/
